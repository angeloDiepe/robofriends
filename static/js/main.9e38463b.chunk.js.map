{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","searchField","robots","filteredRobots","filter","robot","toLowerCase","includes","style","fontSize","length","role","aria-label","map","key","SearchBox","props","type","placeholder","onChange","e","onSearchField","target","value","Scroll","children","border","boxShadow","overflowY","height","width","paddingTop","App","val","setState","state","fetch","then","response","json","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9e38463b.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Card.css\";\n\nexport default function Card({id,name,email}) {\n\treturn (\n\t\t<div className=\"card-container\">\n\t\t\t<img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`} className=\"card-image\"/>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t)\n}","import React from 'react';\nimport Card from \"../Card/Card.js\";\nimport \"./CardList.css\"\n\nexport default function CardList({searchField,robots}) {\n\tconst filteredRobots = robots.filter(robot=>robot.name.toLowerCase().includes(searchField.toLowerCase()))\n\tconst style = {\n\t\tfontSize:\"2em\"\n\t}\n\treturn (\n\t\t<div className=\"cardlist-container\">\n\t\t{(robots.length===0)?\n\t\t\t<h2 className=\"SEGA\" style={style}>Loading...<span role=\"img\" aria-label=\"loading\">‚è≥</span></h2>\n\t\t:\n\t\t\t(filteredRobots.length !== 0)?\n\t\t\t\tfilteredRobots.map(robot=><Card id={robot.id} name={robot.name} email={robot.email} key={`key${robot.id}`}/>)\n\t\t\t:\n\t\t\t\t<h2 className=\"SEGA\" style={style}>Ooops Not found<span role=\"img\" aria-label=\"404\">üòï</span></h2>\n\t\t}\n\t\t</div>\n\t)\n}","import React from 'react';\nimport \"./SearchBox.css\";\n\nexport default function SearchBox(props) {\n\treturn (\n\t\t<div>\n\t\t\t<input type=\"search\" placeholder=\"search Robot\" className=\"searchbox\" onChange={(e)=>props.onSearchField(e.target.value)}/>\n\t\t</div>\n\t)\n}","import React from 'react'\n\nfunction Scroll({children}) {\n\treturn (\n\t\t<div id=\"style-7\" style={{border:\"2px solid black\",boxShadow:\"0px 4px 3px 1px rgba(0,0,0,0.4) inset\",overflowY:\"scroll\",height:\"650px\",width:\"calc(100% - 7px)\",paddingTop:\"50px\"}}>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll","import React from 'react';\nimport CardList from \"../../components/CardList/CardList.js\";\nimport SearchBox from \"../../components/SearchBox/SearchBox.js\";\nimport Scroll from \"../../components/Scroll/Scroll.js\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      searchField : \"\",\n      robots:[]\n    }\n  }\n  onSearchField = (val) =>{\n    this.setState({searchField:val})\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=>response.json())\n    .then(robots=>this.setState({robots:robots.map(robot=>{return {id:robot.id,name:robot.name,email:robot.email}})}))\n  }\n  render() {\n    return (\n      <div className=\"app center\">\n        <h1 className=\"SEGA title-robofriend\">RoboFriends</h1>\n        <SearchBox onSearchField={this.onSearchField}/>\n        <Scroll>\n          <CardList searchField={this.state.searchField} robots={this.state.robots}/>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}